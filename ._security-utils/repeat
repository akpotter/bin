#!/bin/sh
# Repeat a character/hex/asm N times.
#  Usage: repeat <char|hex|asminstr> [x] <n> [arch]
#  Usage: <char|hex|asminstr> [x] <n> [arch]
#    e.g. repeat A x 512                     # AAAAAAAAAAA...
#    e.g.       42 x 512                     # BBBBBBBBBBB...
#    e.g.      NOP x 512                     # \x90\x90\x90...
#    e.g.      NOP x 512 x86_64_linux        # \x90\x90\x90...

# Extract the char/hex/asm_instruction to repeat from the command name or the argument...
executable=$(basename "$0")
if [ "$executable" = "repeat" ]; then
  cmd=${1:?missing argument: CHAR}; shift
else
  cmd=$executable
fi

# Remove the optional 'x' (when called with e.g. `A x 512`), and extract the number...
[ "$1" = "x" ] && shift
[ "$1" = "*" ] && shift
n=${1:-${COLUMNS:-$(tput cols)}};shift

# Extract the extra options for rasm2 (radare2)
opts=$(echo ${*:-$(uname -m)_$(uname -s)} | awk -F'[^a-zA-Z0-9]' 'NF>=1{$0=tolower($0);printf "-a "$1} NF>=2{printf " -b "$2} NF>=3{printf " -k "$3}')

# Convert the hex / assembly instruction(s) into char
char=$(echo "$cmd" | awk '
                             /^.$/ { print $1;                                                   exit }  # if its a simple char, just print it
  toupper($0) ~ /^0x[0-9A-F]{2}/   { $0=gsub("0x","",$0); $0=gsub(/\s/,"",$0)                         }  #  (if it look like HEX, but has "0x" in front, remove all of them + the spaces)
  toupper($0) ~ /^[0-9A-F]{2}h/    { $0=gsub("h","",$0); $0=gsub(/\s/,"",$0)                          }  #  (if it look like HEX, but has "h" after, remove all of them + the spaces)
  toupper($0) ! /^([0-9A-F]{2})+$/ { "rasm2 '"$opts"' \""$0"\" 2>/dev/null" | getline $0;             }  # if it doesnt look like HEX, try to read as ASSEMBLY and convert to HEX
  toupper($0) ~ /^([0-9A-F]{2})+$/ { $0=toupper($0); gsub(/[0-9A-F]{2}/, "\\x&", $0); print $0;  exit }  # if it is now HEX, write \x in front of each bytes
                                   { print "?";                                                  exit }  # otherwise, just print the char "?" (unknown)')
# Repeat the character...
if has perl; then
  perl -e "print \"$char\" x $n"
elif has python; then
  python -c "print(\"$char\" * $n)"
elif has ruby; then
  ruby -e "print \"$char\" * $n"
else
  printf "$char%.0s" {1..$n}
fi

